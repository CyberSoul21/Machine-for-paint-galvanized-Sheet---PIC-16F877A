CCS PCM C Compiler, Version 4.104, 5967               16-Nov-11 22:59

               Filename: C:\Documents and Settings\Administrador\Escritorio\Proyecto2\Proyecto_Máquina.lst

               ROM used: 1514 words (18%)
                         Largest free fragment is 2048
               RAM used: 19 (5%) at main() level
                         44 (12%) worst case
               Stack:    9 worst case (4 in main + 5 for interrupts)

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3C4
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   1DB
.................... #include <16f877a.h>  
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay (clock=4000000)  
*
0037:  MOVLW  3E
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04B
003D:  MOVLW  01
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  4A
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  GOTO   049
0049:  DECFSZ 00,F
004A:  GOTO   03D
004B:  RETURN
.................... #byte puerto_B = 0x06 // Identificador para el puerto B.  
.................... #fuses xt, nowdt, put  //SE UTILIZARA FRECUENCIA EXTERNA Y NO SE UTILIZARA EL WATCHDOG 
.................... #define LCD_DB4   PIN_C4 
.................... #define LCD_DB5   PIN_C5 
.................... #define LCD_DB6   PIN_C6 
.................... #define LCD_DB7   PIN_C7 
.................... #define LCD_RS    PIN_C3 
.................... #define LCD_RW    PIN_C1 
.................... #define LCD_E     PIN_C2 
....................  
.................... #include <flex_lcd.c> 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_C4 
.................... //#define LCD_DB5   PIN_C5 
.................... //#define LCD_DB6   PIN_C6 
.................... //#define LCD_DB7   PIN_C7 
.................... // 
.................... //#define LCD_RS    PIN_C3 
.................... //#define LCD_RW    PIN_C2 
.................... //#define LCD_E     PIN_C1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW   1// 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
*
00EC:  BTFSC  45.0
00ED:  GOTO   0F0
00EE:  BCF    07.4
00EF:  GOTO   0F1
00F0:  BSF    07.4
00F1:  BCF    28.4
00F2:  MOVF   28,W
00F3:  BSF    03.5
00F4:  MOVWF  07
*
0127:  BTFSC  45.0
0128:  GOTO   12B
0129:  BCF    07.4
012A:  GOTO   12C
012B:  BSF    07.4
012C:  BCF    28.4
012D:  MOVF   28,W
012E:  BSF    03.5
012F:  MOVWF  07
*
02B1:  BTFSC  45.0
02B2:  GOTO   2B5
02B3:  BCF    07.4
02B4:  GOTO   2B6
02B5:  BSF    07.4
02B6:  BCF    28.4
02B7:  MOVF   28,W
02B8:  BSF    03.5
02B9:  MOVWF  07
*
02F4:  BTFSC  45.0
02F5:  GOTO   2F8
02F6:  BCF    07.4
02F7:  GOTO   2F9
02F8:  BSF    07.4
02F9:  BCF    28.4
02FA:  MOVF   28,W
02FB:  BSF    03.5
02FC:  MOVWF  07
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
*
00F5:  BCF    03.5
00F6:  BTFSC  45.1
00F7:  GOTO   0FA
00F8:  BCF    07.5
00F9:  GOTO   0FB
00FA:  BSF    07.5
00FB:  BCF    28.5
00FC:  MOVF   28,W
00FD:  BSF    03.5
00FE:  MOVWF  07
*
0130:  BCF    03.5
0131:  BTFSC  45.1
0132:  GOTO   135
0133:  BCF    07.5
0134:  GOTO   136
0135:  BSF    07.5
0136:  BCF    28.5
0137:  MOVF   28,W
0138:  BSF    03.5
0139:  MOVWF  07
*
02BA:  BCF    03.5
02BB:  BTFSC  45.1
02BC:  GOTO   2BF
02BD:  BCF    07.5
02BE:  GOTO   2C0
02BF:  BSF    07.5
02C0:  BCF    28.5
02C1:  MOVF   28,W
02C2:  BSF    03.5
02C3:  MOVWF  07
*
02FD:  BCF    03.5
02FE:  BTFSC  45.1
02FF:  GOTO   302
0300:  BCF    07.5
0301:  GOTO   303
0302:  BSF    07.5
0303:  BCF    28.5
0304:  MOVF   28,W
0305:  BSF    03.5
0306:  MOVWF  07
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
*
00FF:  BCF    03.5
0100:  BTFSC  45.2
0101:  GOTO   104
0102:  BCF    07.6
0103:  GOTO   105
0104:  BSF    07.6
0105:  BCF    28.6
0106:  MOVF   28,W
0107:  BSF    03.5
0108:  MOVWF  07
*
013A:  BCF    03.5
013B:  BTFSC  45.2
013C:  GOTO   13F
013D:  BCF    07.6
013E:  GOTO   140
013F:  BSF    07.6
0140:  BCF    28.6
0141:  MOVF   28,W
0142:  BSF    03.5
0143:  MOVWF  07
*
02C4:  BCF    03.5
02C5:  BTFSC  45.2
02C6:  GOTO   2C9
02C7:  BCF    07.6
02C8:  GOTO   2CA
02C9:  BSF    07.6
02CA:  BCF    28.6
02CB:  MOVF   28,W
02CC:  BSF    03.5
02CD:  MOVWF  07
*
0307:  BCF    03.5
0308:  BTFSC  45.2
0309:  GOTO   30C
030A:  BCF    07.6
030B:  GOTO   30D
030C:  BSF    07.6
030D:  BCF    28.6
030E:  MOVF   28,W
030F:  BSF    03.5
0310:  MOVWF  07
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
*
0109:  BCF    03.5
010A:  BTFSC  45.3
010B:  GOTO   10E
010C:  BCF    07.7
010D:  GOTO   10F
010E:  BSF    07.7
010F:  BCF    28.7
0110:  MOVF   28,W
0111:  BSF    03.5
0112:  MOVWF  07
*
0144:  BCF    03.5
0145:  BTFSC  45.3
0146:  GOTO   149
0147:  BCF    07.7
0148:  GOTO   14A
0149:  BSF    07.7
014A:  BCF    28.7
014B:  MOVF   28,W
014C:  BSF    03.5
014D:  MOVWF  07
*
02CE:  BCF    03.5
02CF:  BTFSC  45.3
02D0:  GOTO   2D3
02D1:  BCF    07.7
02D2:  GOTO   2D4
02D3:  BSF    07.7
02D4:  BCF    28.7
02D5:  MOVF   28,W
02D6:  BSF    03.5
02D7:  MOVWF  07
*
0311:  BCF    03.5
0312:  BTFSC  45.3
0313:  GOTO   316
0314:  BCF    07.7
0315:  GOTO   317
0316:  BSF    07.7
0317:  BCF    28.7
0318:  MOVF   28,W
0319:  BSF    03.5
031A:  MOVWF  07
....................  
....................  delay_cycles(1); 
*
0113:  NOP
*
014E:  NOP
*
02D8:  NOP
*
031B:  NOP
....................  output_high(LCD_E); 
*
0114:  BCF    03.5
0115:  BCF    28.2
0116:  MOVF   28,W
0117:  BSF    03.5
0118:  MOVWF  07
0119:  BCF    03.5
011A:  BSF    07.2
*
014F:  BCF    03.5
0150:  BCF    28.2
0151:  MOVF   28,W
0152:  BSF    03.5
0153:  MOVWF  07
0154:  BCF    03.5
0155:  BSF    07.2
*
02D9:  BCF    03.5
02DA:  BCF    28.2
02DB:  MOVF   28,W
02DC:  BSF    03.5
02DD:  MOVWF  07
02DE:  BCF    03.5
02DF:  BSF    07.2
*
031C:  BCF    03.5
031D:  BCF    28.2
031E:  MOVF   28,W
031F:  BSF    03.5
0320:  MOVWF  07
0321:  BCF    03.5
0322:  BSF    07.2
....................  delay_us(2); 
*
011B:  GOTO   11C
*
0156:  GOTO   157
*
02E0:  GOTO   2E1
*
0323:  GOTO   324
....................  output_low(LCD_E); 
*
011C:  BCF    28.2
011D:  MOVF   28,W
011E:  BSF    03.5
011F:  MOVWF  07
0120:  BCF    03.5
0121:  BCF    07.2
*
0157:  BCF    28.2
0158:  MOVF   28,W
0159:  BSF    03.5
015A:  MOVWF  07
015B:  BCF    03.5
015C:  BCF    07.2
*
02E1:  BCF    28.2
02E2:  MOVF   28,W
02E3:  BSF    03.5
02E4:  MOVWF  07
02E5:  BCF    03.5
02E6:  BCF    07.2
02E7:  CLRF   27
02E8:  BTFSC  0B.7
02E9:  BSF    27.7
02EA:  BCF    0B.7
*
0324:  BCF    28.2
0325:  MOVF   28,W
0326:  BSF    03.5
0327:  MOVWF  07
0328:  BCF    03.5
0329:  BCF    07.2
.................... } 
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
*
0059:  CLRF   46
*
008B:  CLRF   46
....................  
.................... output_high(LCD_E); 
*
005A:  BCF    28.2
005B:  MOVF   28,W
005C:  BSF    03.5
005D:  MOVWF  07
005E:  BCF    03.5
005F:  BSF    07.2
*
008C:  BCF    28.2
008D:  MOVF   28,W
008E:  BSF    03.5
008F:  MOVWF  07
0090:  BCF    03.5
0091:  BSF    07.2
.................... delay_cycles(1); 
*
0060:  NOP
*
0092:  NOP
....................  
.................... retval_0 = input(LCD_DB4); 
*
0061:  BSF    28.4
0062:  MOVF   28,W
0063:  BSF    03.5
0064:  MOVWF  07
0065:  BCF    03.5
0066:  BCF    46.0
0067:  BTFSC  07.4
0068:  BSF    46.0
*
0093:  BSF    28.4
0094:  MOVF   28,W
0095:  BSF    03.5
0096:  MOVWF  07
0097:  BCF    03.5
0098:  BCF    46.0
0099:  BTFSC  07.4
009A:  BSF    46.0
.................... retval_1 = input(LCD_DB5); 
*
0069:  BSF    28.5
006A:  MOVF   28,W
006B:  BSF    03.5
006C:  MOVWF  07
006D:  BCF    03.5
006E:  BCF    46.1
006F:  BTFSC  07.5
0070:  BSF    46.1
*
009B:  BSF    28.5
009C:  MOVF   28,W
009D:  BSF    03.5
009E:  MOVWF  07
009F:  BCF    03.5
00A0:  BCF    46.1
00A1:  BTFSC  07.5
00A2:  BSF    46.1
.................... retval_2 = input(LCD_DB6); 
*
0071:  BSF    28.6
0072:  MOVF   28,W
0073:  BSF    03.5
0074:  MOVWF  07
0075:  BCF    03.5
0076:  BCF    46.2
0077:  BTFSC  07.6
0078:  BSF    46.2
*
00A3:  BSF    28.6
00A4:  MOVF   28,W
00A5:  BSF    03.5
00A6:  MOVWF  07
00A7:  BCF    03.5
00A8:  BCF    46.2
00A9:  BTFSC  07.6
00AA:  BSF    46.2
.................... retval_3 = input(LCD_DB7); 
*
0079:  BSF    28.7
007A:  MOVF   28,W
007B:  BSF    03.5
007C:  MOVWF  07
007D:  BCF    03.5
007E:  BCF    46.3
007F:  BTFSC  07.7
0080:  BSF    46.3
*
00AB:  BSF    28.7
00AC:  MOVF   28,W
00AD:  BSF    03.5
00AE:  MOVWF  07
00AF:  BCF    03.5
00B0:  BCF    46.3
00B1:  BTFSC  07.7
00B2:  BSF    46.3
....................  
.................... output_low(LCD_E); 
*
0081:  BCF    28.2
0082:  MOVF   28,W
0083:  BSF    03.5
0084:  MOVWF  07
0085:  BCF    03.5
0086:  BCF    07.2
*
00B3:  BCF    28.2
00B4:  MOVF   28,W
00B5:  BSF    03.5
00B6:  MOVWF  07
00B7:  BCF    03.5
00B8:  BCF    07.2
....................  
.................... return(retval); 
*
0087:  MOVF   46,W
0088:  MOVWF  78
*
00B9:  MOVF   46,W
00BA:  MOVWF  78
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
*
0052:  BCF    28.1
0053:  MOVF   28,W
0054:  BSF    03.5
0055:  MOVWF  07
0056:  BCF    03.5
0057:  BSF    07.1
.................... delay_cycles(1); 
0058:  NOP
....................  
.................... high = lcd_read_nibble(); 
*
0089:  MOVF   78,W
008A:  MOVWF  45
....................  
.................... low = lcd_read_nibble(); 
*
00BB:  MOVF   78,W
00BC:  MOVWF  44
....................  
.................... return( (high<<4) | low); 
00BD:  SWAPF  45,W
00BE:  MOVWF  77
00BF:  MOVLW  F0
00C0:  ANDWF  77,F
00C1:  MOVF   77,W
00C2:  IORWF  44,W
00C3:  MOVWF  78
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
*
004C:  BCF    28.3
004D:  MOVF   28,W
004E:  BSF    03.5
004F:  MOVWF  07
0050:  BCF    03.5
0051:  BCF    07.3
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
*
00C4:  MOVF   78,W
00C5:  MOVWF  44
00C6:  BTFSC  44.7
00C7:  GOTO   052
.................... #else 
.................... delay_us(60); 
.................... #endif 
....................  
.................... if(address) 
00C8:  MOVF   42,F
00C9:  BTFSC  03.2
00CA:  GOTO   0D2
....................    output_high(LCD_RS); 
00CB:  BCF    28.3
00CC:  MOVF   28,W
00CD:  BSF    03.5
00CE:  MOVWF  07
00CF:  BCF    03.5
00D0:  BSF    07.3
.................... else 
00D1:  GOTO   0D8
....................    output_low(LCD_RS); 
00D2:  BCF    28.3
00D3:  MOVF   28,W
00D4:  BSF    03.5
00D5:  MOVWF  07
00D6:  BCF    03.5
00D7:  BCF    07.3
....................  
....................  delay_cycles(1); 
00D8:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00D9:  BCF    28.1
00DA:  MOVF   28,W
00DB:  BSF    03.5
00DC:  MOVWF  07
00DD:  BCF    03.5
00DE:  BCF    07.1
.................... delay_cycles(1); 
00DF:  NOP
.................... #endif 
....................  
.................... output_low(LCD_E); 
00E0:  BCF    28.2
00E1:  MOVF   28,W
00E2:  BSF    03.5
00E3:  MOVWF  07
00E4:  BCF    03.5
00E5:  BCF    07.2
....................  
.................... lcd_send_nibble(n >> 4); 
00E6:  SWAPF  43,W
00E7:  MOVWF  44
00E8:  MOVLW  0F
00E9:  ANDWF  44,F
00EA:  MOVF   44,W
00EB:  MOVWF  45
.................... lcd_send_nibble(n & 0xf); 
*
0122:  MOVF   43,W
0123:  ANDLW  0F
0124:  MOVWF  44
0125:  MOVF   44,W
0126:  MOVWF  45
.................... } 
*
015D:  RETURN
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
*
028F:  BCF    28.3
0290:  MOVF   28,W
0291:  BSF    03.5
0292:  MOVWF  07
0293:  BCF    03.5
0294:  BCF    07.3
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
0295:  BCF    28.1
0296:  MOVF   28,W
0297:  BSF    03.5
0298:  MOVWF  07
0299:  BCF    03.5
029A:  BCF    07.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
029B:  BCF    28.2
029C:  MOVF   28,W
029D:  BSF    03.5
029E:  MOVWF  07
029F:  BCF    03.5
02A0:  BCF    07.2
02A1:  CLRF   27
02A2:  BTFSC  0B.7
02A3:  BSF    27.7
02A4:  BCF    0B.7
....................  
.................... delay_ms(15); 
02A5:  MOVLW  0F
02A6:  MOVWF  3E
02A7:  CALL   037
02A8:  BTFSC  27.7
02A9:  BSF    0B.7
....................  
.................... for(i=0 ;i < 3; i++) 
02AA:  CLRF   2D
02AB:  MOVF   2D,W
02AC:  SUBLW  02
02AD:  BTFSS  03.0
02AE:  GOTO   2F2
....................    { 
....................     lcd_send_nibble(0x03); 
02AF:  MOVLW  03
02B0:  MOVWF  45
....................     delay_ms(5); 
*
02EB:  MOVLW  05
02EC:  MOVWF  3E
02ED:  CALL   037
02EE:  BTFSC  27.7
02EF:  BSF    0B.7
....................    } 
02F0:  INCF   2D,F
02F1:  GOTO   2AB
....................  
.................... lcd_send_nibble(0x02); 
02F2:  MOVLW  02
02F3:  MOVWF  45
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
*
032A:  CLRF   2D
032B:  MOVF   2D,W
032C:  SUBLW  03
032D:  BTFSS  03.0
032E:  GOTO   33E
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
032F:  MOVF   2D,W
0330:  CALL   02F
0331:  MOVWF  2E
0332:  CLRF   27
0333:  BTFSC  0B.7
0334:  BSF    27.7
0335:  BCF    0B.7
0336:  CLRF   42
0337:  MOVF   2E,W
0338:  MOVWF  43
0339:  CALL   04C
033A:  BTFSC  27.7
033B:  BSF    0B.7
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................    } 
033C:  INCF   2D,F
033D:  GOTO   32B
....................  
.................... } 
033E:  BCF    0A.3
033F:  BCF    0A.4
0340:  GOTO   3D7 (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
*
015E:  DECFSZ 3F,W
015F:  GOTO   161
0160:  GOTO   164
....................    address = lcd_line_two; 
0161:  MOVLW  40
0162:  MOVWF  40
.................... else 
0163:  GOTO   165
....................    address=0; 
0164:  CLRF   40
....................  
.................... address += x-1; 
0165:  MOVLW  01
0166:  SUBWF  3E,W
0167:  ADDWF  40,F
.................... lcd_send_byte(0, 0x80 | address); 
0168:  MOVF   40,W
0169:  IORLW  80
016A:  MOVWF  41
016B:  CLRF   42
016C:  MOVF   41,W
016D:  MOVWF  43
016E:  CALL   04C
.................... } 
016F:  RETURN
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
0170:  MOVF   3D,W
0171:  XORLW  0C
0172:  BTFSC  03.2
0173:  GOTO   17B
0174:  XORLW  06
0175:  BTFSC  03.2
0176:  GOTO   183
0177:  XORLW  02
0178:  BTFSC  03.2
0179:  GOTO   189
017A:  GOTO   18E
....................     case '\f': 
....................       lcd_send_byte(0,1); 
017B:  CLRF   42
017C:  MOVLW  01
017D:  MOVWF  43
017E:  CALL   04C
....................       delay_ms(2); 
017F:  MOVLW  02
0180:  MOVWF  3E
0181:  CALL   037
....................       break; 
0182:  GOTO   194
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
0183:  MOVLW  01
0184:  MOVWF  3E
0185:  MOVLW  02
0186:  MOVWF  3F
0187:  CALL   15E
....................        break; 
0188:  GOTO   194
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0189:  CLRF   42
018A:  MOVLW  10
018B:  MOVWF  43
018C:  CALL   04C
....................        break; 
018D:  GOTO   194
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
018E:  MOVLW  01
018F:  MOVWF  42
0190:  MOVF   3D,W
0191:  MOVWF  43
0192:  CALL   04C
....................        break; 
0193:  GOTO   194
....................    } 
.................... } 
0194:  RETURN
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
....................  
....................  
....................  
.................... int c=0; 
.................... int g=0; 
.................... int p; 
.................... int r=1; 
.................... #int_RB //Interrupciones por algunos de los puertos RBa a Rb7 
.................... void RB_isr(void) //función de interrupción  
.................... {  
*
0243:  DATA 00,00
....................  
....................    switch(puerto_B)  
....................    {  
*
01DB:  MOVF   06,W
01DC:  XORLW  EF
01DD:  BTFSC  03.2
01DE:  GOTO   1E3
01DF:  XORLW  30
01E0:  BTFSC  03.2
01E1:  GOTO   1EF
01E2:  GOTO   22E
....................       case 239://Cuando pulse el sensor 2 para el motor principal 
....................       
....................       output_low(PIN_D5);//Paro motor principal 
01E3:  BSF    03.5
01E4:  BCF    08.5
01E5:  BCF    03.5
01E6:  BCF    08.5
....................       delay_ms(500); 
01E7:  MOVLW  02
01E8:  MOVWF  3A
01E9:  MOVLW  FA
01EA:  MOVWF  3E
01EB:  CALL   037
01EC:  DECFSZ 3A,F
01ED:  GOTO   1E9
....................       break;  
01EE:  GOTO   22E
....................       case 223://Paro de emergencia  
....................       printf(lcd_putc,"\f"); 
01EF:  MOVLW  0C
01F0:  MOVWF  3D
01F1:  CALL   170
....................       do{ 
....................       output_low(PIN_D0);//Detiene el motor secundario 
01F2:  BSF    03.5
01F3:  BCF    08.0
01F4:  BCF    03.5
01F5:  BCF    08.0
....................       output_low(PIN_D1);//Detiene el motor secundario 
01F6:  BSF    03.5
01F7:  BCF    08.1
01F8:  BCF    03.5
01F9:  BCF    08.1
....................       output_low(PIN_D7);//Detiene selenoide 
01FA:  BSF    03.5
01FB:  BCF    08.7
01FC:  BCF    03.5
01FD:  BCF    08.7
....................       output_low(PIN_D5);//Frena motor 
01FE:  BSF    03.5
01FF:  BCF    08.5
0200:  BCF    03.5
0201:  BCF    08.5
....................       lcd_gotoxy(7,1);                       //escribe el mensaje en la posicion x=3,y=1 
0202:  MOVLW  07
0203:  MOVWF  3E
0204:  MOVLW  01
0205:  MOVWF  3F
0206:  CALL   15E
....................       printf(lcd_putc,"PARO");           //escribe el mensaje en la pantalla 
0207:  MOVLW  32
0208:  BSF    03.6
0209:  MOVWF  0D
020A:  MOVLW  02
020B:  MOVWF  0F
020C:  BCF    03.6
020D:  CALL   195
....................       lcd_gotoxy(4,2);                       //escribe el mensaje en la posicion x=3,y=1 
020E:  MOVLW  04
020F:  MOVWF  3E
0210:  MOVLW  02
0211:  MOVWF  3F
0212:  CALL   15E
....................       printf(lcd_putc,"Emergencia"); 
0213:  MOVLW  35
0214:  BSF    03.6
0215:  MOVWF  0D
0216:  MOVLW  02
0217:  MOVWF  0F
0218:  BCF    03.6
0219:  CALL   195
....................       }while(input(PIN_D3)==0); 
021A:  BSF    03.5
021B:  BSF    08.3
021C:  BCF    03.5
021D:  BTFSS  08.3
021E:  GOTO   1F2
....................       printf(lcd_putc,"\f"); 
021F:  MOVLW  0C
0220:  MOVWF  3D
0221:  CALL   170
....................       lcd_gotoxy(1,1);                       //escribe el mensaje en la posicion x=3,y=1 
0222:  MOVLW  01
0223:  MOVWF  3E
0224:  MOVWF  3F
0225:  CALL   15E
....................       printf(lcd_putc,"Proceso Iniciado"); 
0226:  MOVLW  3B
0227:  BSF    03.6
0228:  MOVWF  0D
0229:  MOVLW  02
022A:  MOVWF  0F
022B:  BCF    03.6
022C:  CALL   195
....................       break;   
022D:  GOTO   22E
....................    }  
.................... } 
022E:  BCF    0B.0
022F:  BCF    0A.3
0230:  BCF    0A.4
0231:  GOTO   01B
.................... void MotorSecundario() 
.................... { 
....................  output_high(PIN_D0); 
*
0353:  BSF    03.5
0354:  BCF    08.0
0355:  BCF    03.5
0356:  BSF    08.0
....................  return; 
.................... } 
0357:  BCF    0A.3
0358:  BCF    0A.4
0359:  GOTO   468 (RETURN)
.................... void FuncionStart() 
.................... { 
....................  output_high(PIN_D7);//inicia selenoide 
*
0341:  BSF    03.5
0342:  BCF    08.7
0343:  BCF    03.5
0344:  BSF    08.7
....................  delay_ms(1000); 
0345:  MOVLW  04
0346:  MOVWF  2D
0347:  CLRF   27
0348:  BTFSC  0B.7
0349:  BSF    27.7
034A:  BCF    0B.7
034B:  MOVLW  FA
034C:  MOVWF  3E
034D:  CALL   037
034E:  BTFSC  27.7
034F:  BSF    0B.7
0350:  DECFSZ 2D,F
0351:  GOTO   347
....................  return; 
.................... } 
0352:  RETURN
.................... void GiroMotorPrincipal() 
.................... { 
....................  output_high(PIN_D5);//Arranca motor principal 
....................  delay_ms(2000);//Espera un tiempo  
....................  output_low(PIN_D5);//Frena motor 
.................... } 
.................... void GiroIzqMotorSecundario() 
.................... { 
....................   output_low(PIN_D0);//Detiene el motor secundario 
*
035A:  BSF    03.5
035B:  BCF    08.0
035C:  BCF    03.5
035D:  BCF    08.0
....................   delay_ms(500); 
035E:  MOVLW  02
035F:  MOVWF  2D
0360:  CLRF   27
0361:  BTFSC  0B.7
0362:  BSF    27.7
0363:  BCF    0B.7
0364:  MOVLW  FA
0365:  MOVWF  3E
0366:  CALL   037
0367:  BTFSC  27.7
0368:  BSF    0B.7
0369:  DECFSZ 2D,F
036A:  GOTO   360
....................   output_low(PIN_D7);//Detiene selenoide 
036B:  BSF    03.5
036C:  BCF    08.7
036D:  BCF    03.5
036E:  BCF    08.7
....................   output_high(PIN_D5);//Arranca motor principal 
036F:  BSF    03.5
0370:  BCF    08.5
0371:  BCF    03.5
0372:  BSF    08.5
....................   delay_ms(2000);//Espera un tiempo  
0373:  MOVLW  08
0374:  MOVWF  2D
0375:  CLRF   27
0376:  BTFSC  0B.7
0377:  BSF    27.7
0378:  BCF    0B.7
0379:  MOVLW  FA
037A:  MOVWF  3E
037B:  CALL   037
037C:  BTFSC  27.7
037D:  BSF    0B.7
037E:  DECFSZ 2D,F
037F:  GOTO   375
....................    
....................   output_low(PIN_D5);//Frena motor 
0380:  BSF    03.5
0381:  BCF    08.5
0382:  BCF    03.5
0383:  BCF    08.5
....................   output_high(PIN_D7);//inicia selenoide 
0384:  BSF    03.5
0385:  BCF    08.7
0386:  BCF    03.5
0387:  BSF    08.7
....................   output_high(PIN_D1);//Invierte el giro 
0388:  BSF    03.5
0389:  BCF    08.1
038A:  BCF    03.5
038B:  BSF    08.1
....................    
....................   return; 
.................... } 
038C:  BCF    0A.3
038D:  BCF    0A.4
038E:  GOTO   490 (RETURN)
.................... void GiroDerMotorSecundario() 
.................... { 
....................  output_low(PIN_D1);//Detiene el motor secundario 
038F:  BSF    03.5
0390:  BCF    08.1
0391:  BCF    03.5
0392:  BCF    08.1
....................  delay_ms(500); 
0393:  MOVLW  02
0394:  MOVWF  2D
0395:  CLRF   27
0396:  BTFSC  0B.7
0397:  BSF    27.7
0398:  BCF    0B.7
0399:  MOVLW  FA
039A:  MOVWF  3E
039B:  CALL   037
039C:  BTFSC  27.7
039D:  BSF    0B.7
039E:  DECFSZ 2D,F
039F:  GOTO   395
....................  output_low(PIN_D7);//Detiene selenoide 
03A0:  BSF    03.5
03A1:  BCF    08.7
03A2:  BCF    03.5
03A3:  BCF    08.7
....................  output_high(PIN_D5);//Arranca motor principal 
03A4:  BSF    03.5
03A5:  BCF    08.5
03A6:  BCF    03.5
03A7:  BSF    08.5
....................  delay_ms(2000);//Espera un tiempo  
03A8:  MOVLW  08
03A9:  MOVWF  2D
03AA:  CLRF   27
03AB:  BTFSC  0B.7
03AC:  BSF    27.7
03AD:  BCF    0B.7
03AE:  MOVLW  FA
03AF:  MOVWF  3E
03B0:  CALL   037
03B1:  BTFSC  27.7
03B2:  BSF    0B.7
03B3:  DECFSZ 2D,F
03B4:  GOTO   3AA
....................  output_low(PIN_D5);//Frena motor 
03B5:  BSF    03.5
03B6:  BCF    08.5
03B7:  BCF    03.5
03B8:  BCF    08.5
....................  output_high(PIN_D7);//inicia selenoide 
03B9:  BSF    03.5
03BA:  BCF    08.7
03BB:  BCF    03.5
03BC:  BSF    08.7
....................  output_high(PIN_D0);//Invierte el giro 
03BD:  BSF    03.5
03BE:  BCF    08.0
03BF:  BCF    03.5
03C0:  BSF    08.0
....................   
....................  return; 
.................... } 
03C1:  BCF    0A.3
03C2:  BCF    0A.4
03C3:  GOTO   4BA (RETURN)
.................... void PosicionInicial3()//Posicion inicial para el sensor 3 
.................... { 
....................  output_low(PIN_D0);//Detiene el motor secundario 
*
04FB:  BSF    03.5
04FC:  BCF    08.0
04FD:  BCF    03.5
04FE:  BCF    08.0
....................  delay_ms(500); 
04FF:  MOVLW  02
0500:  MOVWF  2D
0501:  CLRF   27
0502:  BTFSC  0B.7
0503:  BSF    27.7
0504:  BCF    0B.7
0505:  MOVLW  FA
0506:  MOVWF  3E
0507:  CALL   037
0508:  BTFSC  27.7
0509:  BSF    0B.7
050A:  DECFSZ 2D,F
050B:  GOTO   501
....................  output_low(PIN_D7);//Detiene selenoide 
050C:  BSF    03.5
050D:  BCF    08.7
050E:  BCF    03.5
050F:  BCF    08.7
....................  delay_ms(500); 
0510:  MOVLW  02
0511:  MOVWF  2D
0512:  CLRF   27
0513:  BTFSC  0B.7
0514:  BSF    27.7
0515:  BCF    0B.7
0516:  MOVLW  FA
0517:  MOVWF  3E
0518:  CALL   037
0519:  BTFSC  27.7
051A:  BSF    0B.7
051B:  DECFSZ 2D,F
051C:  GOTO   512
....................  do 
....................  { 
....................   output_high(PIN_D6);//Invierte el giro del motor principal 
051D:  BSF    03.5
051E:  BCF    08.6
051F:  BCF    03.5
0520:  BSF    08.6
....................   output_high(PIN_D5);// 
0521:  BSF    03.5
0522:  BCF    08.5
0523:  BCF    03.5
0524:  BSF    08.5
....................  }while(input(PIN_D4)==0);//Hasta que vea el sensor 1 
0525:  BSF    03.5
0526:  BSF    08.4
0527:  BCF    03.5
0528:  BTFSS  08.4
0529:  GOTO   51D
....................   output_low(PIN_D5);// 
052A:  BSF    03.5
052B:  BCF    08.5
052C:  BCF    03.5
052D:  BCF    08.5
....................  output_low(PIN_D6);//Detiene el motor principal 
052E:  BSF    03.5
052F:  BCF    08.6
0530:  BCF    03.5
0531:  BCF    08.6
....................  
....................  do 
....................  { 
....................   output_high(PIN_D1);//Regresa el motor secundario al estado inicial 
0532:  BSF    03.5
0533:  BCF    08.1
0534:  BCF    03.5
0535:  BSF    08.1
....................  }while(input(PIN_A1)==0);//Hasta que lo vea el sensor 4 
0536:  BSF    03.5
0537:  BSF    05.1
0538:  BCF    03.5
0539:  BTFSS  05.1
053A:  GOTO   532
....................  output_low(PIN_D1);//Detiene el motor secundario 
053B:  BSF    03.5
053C:  BCF    08.1
053D:  BCF    03.5
053E:  BCF    08.1
053F:  CLRF   27
0540:  BTFSC  0B.7
0541:  BSF    27.7
0542:  BCF    0B.7
....................  lcd_gotoxy(1,1);                       //escribe el mensaje en la posicion x=3,y=1 
0543:  MOVLW  01
0544:  MOVWF  3E
0545:  MOVWF  3F
0546:  CALL   15E
0547:  BTFSC  27.7
0548:  BSF    0B.7
....................  printf(lcd_putc,"Inicio         ");                     
0549:  MOVLW  44
054A:  BSF    03.6
054B:  MOVWF  0D
054C:  MOVLW  02
054D:  MOVWF  0F
054E:  BCF    03.6
054F:  CLRF   27
0550:  BTFSC  0B.7
0551:  BSF    27.7
0552:  BCF    0B.7
0553:  CALL   195
0554:  BTFSC  27.7
0555:  BSF    0B.7
....................  
....................  return; 
.................... } 
.................... void PosicionInicial4()//Posicion inicial para el sensor 4 
.................... { 
....................  output_low(PIN_D1);//Detiene el motor secundario 
*
0594:  BSF    03.5
0595:  BCF    08.1
0596:  BCF    03.5
0597:  BCF    08.1
....................  delay_ms(500); 
0598:  MOVLW  02
0599:  MOVWF  2D
059A:  CLRF   27
059B:  BTFSC  0B.7
059C:  BSF    27.7
059D:  BCF    0B.7
059E:  MOVLW  FA
059F:  MOVWF  3E
05A0:  CALL   037
05A1:  BTFSC  27.7
05A2:  BSF    0B.7
05A3:  DECFSZ 2D,F
05A4:  GOTO   59A
....................  output_low(PIN_D7);//Detiene selenoide 
05A5:  BSF    03.5
05A6:  BCF    08.7
05A7:  BCF    03.5
05A8:  BCF    08.7
....................  delay_ms(500); 
05A9:  MOVLW  02
05AA:  MOVWF  2D
05AB:  CLRF   27
05AC:  BTFSC  0B.7
05AD:  BSF    27.7
05AE:  BCF    0B.7
05AF:  MOVLW  FA
05B0:  MOVWF  3E
05B1:  CALL   037
05B2:  BTFSC  27.7
05B3:  BSF    0B.7
05B4:  DECFSZ 2D,F
05B5:  GOTO   5AB
....................  do 
....................  { 
....................   output_high(PIN_D6);//Invierte el giro del motor principal 
05B6:  BSF    03.5
05B7:  BCF    08.6
05B8:  BCF    03.5
05B9:  BSF    08.6
....................   output_high(PIN_D5);// 
05BA:  BSF    03.5
05BB:  BCF    08.5
05BC:  BCF    03.5
05BD:  BSF    08.5
....................  }while(input(PIN_D4)==0);//Hasta que vea el sensor 1 
05BE:  BSF    03.5
05BF:  BSF    08.4
05C0:  BCF    03.5
05C1:  BTFSS  08.4
05C2:  GOTO   5B6
....................  output_low(PIN_D5);// 
05C3:  BSF    03.5
05C4:  BCF    08.5
05C5:  BCF    03.5
05C6:  BCF    08.5
....................  output_low(PIN_D6);//Detiene el motor principal 
05C7:  BSF    03.5
05C8:  BCF    08.6
05C9:  BCF    03.5
05CA:  BCF    08.6
05CB:  CLRF   27
05CC:  BTFSC  0B.7
05CD:  BSF    27.7
05CE:  BCF    0B.7
....................  lcd_gotoxy(1,1);                       //escribe el mensaje en la posicion x=3,y=1 
05CF:  MOVLW  01
05D0:  MOVWF  3E
05D1:  MOVWF  3F
05D2:  CALL   15E
05D3:  BTFSC  27.7
05D4:  BSF    0B.7
....................  printf(lcd_putc,"Inicio         ");                       
05D5:  MOVLW  4C
05D6:  BSF    03.6
05D7:  MOVWF  0D
05D8:  MOVLW  02
05D9:  MOVWF  0F
05DA:  BCF    03.6
05DB:  CLRF   27
05DC:  BTFSC  0B.7
05DD:  BSF    27.7
05DE:  BCF    0B.7
05DF:  CALL   195
05E0:  BTFSC  27.7
05E1:  BSF    0B.7
....................  return; 
.................... } 
.................... void main() 
.................... { 
*
028E:  DATA 00,00
*
03C4:  CLRF   04
03C5:  BCF    03.7
03C6:  MOVLW  1F
03C7:  ANDWF  03,F
03C8:  CLRF   29
03C9:  CLRF   2A
03CA:  MOVLW  01
03CB:  MOVWF  2C
03CC:  BSF    03.5
03CD:  BSF    1F.0
03CE:  BSF    1F.1
03CF:  BSF    1F.2
03D0:  BCF    1F.3
03D1:  MOVLW  07
03D2:  MOVWF  1C
....................  lcd_init();          //inicia comunicacion con lcd y lo configura 
*
03D6:  GOTO   28F
....................  delay_ms(500); 
03D7:  MOVLW  02
03D8:  MOVWF  2D
03D9:  CLRF   27
03DA:  BTFSC  0B.7
03DB:  BSF    27.7
03DC:  BCF    0B.7
03DD:  MOVLW  FA
03DE:  MOVWF  3E
03DF:  CALL   037
03E0:  BTFSC  27.7
03E1:  BSF    0B.7
03E2:  DECFSZ 2D,F
03E3:  GOTO   3D9
03E4:  CLRF   27
03E5:  BTFSC  0B.7
03E6:  BSF    27.7
03E7:  BCF    0B.7
....................  lcd_gotoxy(5,1);                       //escribe el mensaje en la posicion x=3,y=1 
03E8:  MOVLW  05
03E9:  MOVWF  3E
03EA:  MOVLW  01
03EB:  MOVWF  3F
03EC:  CALL   15E
03ED:  BTFSC  27.7
03EE:  BSF    0B.7
....................  printf(lcd_putc,"MAQUINA");           //escribe el mensaje en la pantalla 
03EF:  MOVLW  54
03F0:  BSF    03.6
03F1:  MOVWF  0D
03F2:  MOVLW  02
03F3:  MOVWF  0F
03F4:  BCF    03.6
03F5:  CLRF   27
03F6:  BTFSC  0B.7
03F7:  BSF    27.7
03F8:  BCF    0B.7
03F9:  CALL   195
03FA:  BTFSC  27.7
03FB:  BSF    0B.7
03FC:  CLRF   27
03FD:  BTFSC  0B.7
03FE:  BSF    27.7
03FF:  BCF    0B.7
....................  lcd_gotoxy(4,2);                       //escribe el mensaje en la posicion x=3,y=1 
0400:  MOVLW  04
0401:  MOVWF  3E
0402:  MOVLW  02
0403:  MOVWF  3F
0404:  CALL   15E
0405:  BTFSC  27.7
0406:  BSF    0B.7
....................  printf(lcd_putc,"AUTOMATICA"); 
0407:  MOVLW  58
0408:  BSF    03.6
0409:  MOVWF  0D
040A:  MOVLW  02
040B:  MOVWF  0F
040C:  BCF    03.6
040D:  CLRF   27
040E:  BTFSC  0B.7
040F:  BSF    27.7
0410:  BCF    0B.7
0411:  CALL   195
0412:  BTFSC  27.7
0413:  BSF    0B.7
....................  DELAY_MS(500); 
0414:  MOVLW  02
0415:  MOVWF  2D
0416:  CLRF   27
0417:  BTFSC  0B.7
0418:  BSF    27.7
0419:  BCF    0B.7
041A:  MOVLW  FA
041B:  MOVWF  3E
041C:  CALL   037
041D:  BTFSC  27.7
041E:  BSF    0B.7
041F:  DECFSZ 2D,F
0420:  GOTO   416
0421:  CLRF   27
0422:  BTFSC  0B.7
0423:  BSF    27.7
0424:  BCF    0B.7
....................  printf(lcd_putc,"\f"); 
0425:  MOVLW  0C
0426:  MOVWF  3D
0427:  CALL   170
0428:  BTFSC  27.7
0429:  BSF    0B.7
....................  SET_TRIS_D(0x18);//Configura 00011000 para el puerto D 
042A:  MOVLW  18
042B:  BSF    03.5
042C:  MOVWF  08
....................  SET_TRIS_B(0xFF);//Configura puerto B como entradas 
042D:  MOVLW  FF
042E:  MOVWF  06
....................  SET_TRIS_A(0xff); 
042F:  MOVWF  05
....................  enable_interrupts(INT_RB);//habilita interrupción particular  
0430:  BCF    03.5
0431:  BSF    0B.3
....................  enable_interrupts(GLOBAL);//habilita interrupción global  
0432:  MOVLW  C0
0433:  IORWF  0B,F
....................  output_D(0x18); 
0434:  BSF    03.5
0435:  CLRF   08
0436:  MOVLW  18
0437:  BCF    03.5
0438:  MOVWF  08
....................   
....................  output_low(PIN_D4);// 
0439:  BSF    03.5
043A:  BCF    08.4
043B:  BCF    03.5
043C:  BCF    08.4
....................  output_high(PIN_D2); 
043D:  BSF    03.5
043E:  BCF    08.2
043F:  BCF    03.5
0440:  BSF    08.2
....................   
....................  while(true) 
....................  { 
....................   if(input(PIN_D3)&& C==0 && input(PIN_A1))//Verifica si se pulsa el start asigna valor a variable 
0441:  BSF    03.5
0442:  BSF    08.3
0443:  BCF    03.5
0444:  BTFSS  08.3
0445:  GOTO   46B
0446:  MOVF   29,F
0447:  BTFSS  03.2
0448:  GOTO   46B
0449:  BSF    03.5
044A:  BSF    05.1
044B:  BCF    03.5
044C:  BTFSS  05.1
044D:  GOTO   46B
044E:  CLRF   27
044F:  BTFSC  0B.7
0450:  BSF    27.7
0451:  BCF    0B.7
....................   { 
....................    lcd_gotoxy(1,1);                       //escribe el mensaje en la posicion x=3,y=1 
0452:  MOVLW  01
0453:  MOVWF  3E
0454:  MOVWF  3F
0455:  CALL   15E
0456:  BTFSC  27.7
0457:  BSF    0B.7
....................    printf(lcd_putc,"Proceso Iniciado"); 
0458:  MOVLW  5E
0459:  BSF    03.6
045A:  MOVWF  0D
045B:  MOVLW  02
045C:  MOVWF  0F
045D:  BCF    03.6
045E:  CLRF   27
045F:  BTFSC  0B.7
0460:  BSF    27.7
0461:  BCF    0B.7
0462:  CALL   195
0463:  BTFSC  27.7
0464:  BSF    0B.7
....................    FuncionStart(); 
0465:  CALL   341
....................    FuncionStart(); 
0466:  CALL   341
....................    MotorSecundario(); 
0467:  GOTO   353
....................    c=1;//Solo se pulsara una vez. 
0468:  MOVLW  01
0469:  MOVWF  29
....................    p=1; 
046A:  MOVWF  2B
....................   } 
....................   while(p==1)//Proceso 
....................   { 
046B:  DECFSZ 2B,W
046C:  GOTO   5E8
....................      if(input(PIN_A0)==1&&g==0&&r==1)//Sensor 3 
046D:  BSF    03.5
046E:  BSF    05.0
046F:  BCF    03.5
0470:  BTFSS  05.0
0471:  GOTO   498
0472:  MOVF   2A,F
0473:  BTFSS  03.2
0474:  GOTO   498
0475:  DECFSZ 2C,W
0476:  GOTO   498
0477:  CLRF   27
0478:  BTFSC  0B.7
0479:  BSF    27.7
047A:  BCF    0B.7
....................      { 
....................       lcd_gotoxy(1,2);                       //escribe el mensaje en la posicion x=3,y=1 
047B:  MOVLW  01
047C:  MOVWF  3E
047D:  MOVLW  02
047E:  MOVWF  3F
047F:  CALL   15E
0480:  BTFSC  27.7
0481:  BSF    0B.7
....................       printf(lcd_putc,"Sensor 3"); 
0482:  MOVLW  67
0483:  BSF    03.6
0484:  MOVWF  0D
0485:  MOVLW  02
0486:  MOVWF  0F
0487:  BCF    03.6
0488:  CLRF   27
0489:  BTFSC  0B.7
048A:  BSF    27.7
048B:  BCF    0B.7
048C:  CALL   195
048D:  BTFSC  27.7
048E:  BSF    0B.7
....................       GiroIzqMotorSecundario(); 
048F:  GOTO   35A
....................       if(input(PIN_B4)==0) 
0490:  BSF    03.5
0491:  BSF    06.4
0492:  BCF    03.5
0493:  BTFSC  06.4
0494:  GOTO   496
....................       { 
....................        r=0; 
0495:  CLRF   2C
....................       } 
....................       g=1; 
0496:  MOVLW  01
0497:  MOVWF  2A
....................      } 
....................      if(input(PIN_A1)==1&&g==1&&r==1)//Sensor 4 
0498:  BSF    03.5
0499:  BSF    05.1
049A:  BCF    03.5
049B:  BTFSS  05.1
049C:  GOTO   4C1
049D:  DECFSZ 2A,W
049E:  GOTO   4C1
049F:  DECFSZ 2C,W
04A0:  GOTO   4C1
04A1:  CLRF   27
04A2:  BTFSC  0B.7
04A3:  BSF    27.7
04A4:  BCF    0B.7
....................      { 
....................       lcd_gotoxy(1,2);                       //escribe el mensaje en la posicion x=3,y=1 
04A5:  MOVLW  01
04A6:  MOVWF  3E
04A7:  MOVLW  02
04A8:  MOVWF  3F
04A9:  CALL   15E
04AA:  BTFSC  27.7
04AB:  BSF    0B.7
....................       printf(lcd_putc,"Sensor 4"); 
04AC:  MOVLW  6C
04AD:  BSF    03.6
04AE:  MOVWF  0D
04AF:  MOVLW  02
04B0:  MOVWF  0F
04B1:  BCF    03.6
04B2:  CLRF   27
04B3:  BTFSC  0B.7
04B4:  BSF    27.7
04B5:  BCF    0B.7
04B6:  CALL   195
04B7:  BTFSC  27.7
04B8:  BSF    0B.7
....................       GiroDerMotorSecundario(); 
04B9:  GOTO   38F
....................       if(input(PIN_B4)==0) 
04BA:  BSF    03.5
04BB:  BSF    06.4
04BC:  BCF    03.5
04BD:  BTFSC  06.4
04BE:  GOTO   4C0
....................       { 
....................        r=0; 
04BF:  CLRF   2C
....................       } 
....................       g=0; 
04C0:  CLRF   2A
....................      } 
....................      if(input(PIN_A0)==1&&g==0&&r==0)//Actua cuando el motor Principal llega a su fin 
04C1:  BSF    03.5
04C2:  BSF    05.0
04C3:  BCF    03.5
04C4:  BTFSS  05.0
04C5:  GOTO   55B
04C6:  MOVF   2A,F
04C7:  BTFSS  03.2
04C8:  GOTO   55B
04C9:  MOVF   2C,F
04CA:  BTFSS  03.2
04CB:  GOTO   55B
04CC:  CLRF   27
04CD:  BTFSC  0B.7
04CE:  BSF    27.7
04CF:  BCF    0B.7
....................      { 
....................       lcd_gotoxy(1,2);                       //escribe el mensaje en la posicion x=3,y=1 
04D0:  MOVLW  01
04D1:  MOVWF  3E
04D2:  MOVLW  02
04D3:  MOVWF  3F
04D4:  CALL   15E
04D5:  BTFSC  27.7
04D6:  BSF    0B.7
....................       printf(lcd_putc,"Sensor 3"); 
04D7:  MOVLW  71
04D8:  BSF    03.6
04D9:  MOVWF  0D
04DA:  MOVLW  02
04DB:  MOVWF  0F
04DC:  BCF    03.6
04DD:  CLRF   27
04DE:  BTFSC  0B.7
04DF:  BSF    27.7
04E0:  BCF    0B.7
04E1:  CALL   195
04E2:  BTFSC  27.7
04E3:  BSF    0B.7
04E4:  CLRF   27
04E5:  BTFSC  0B.7
04E6:  BSF    27.7
04E7:  BCF    0B.7
....................       lcd_gotoxy(1,1);                       //escribe el mensaje en la posicion x=3,y=1 
04E8:  MOVLW  01
04E9:  MOVWF  3E
04EA:  MOVWF  3F
04EB:  CALL   15E
04EC:  BTFSC  27.7
04ED:  BSF    0B.7
....................       printf(lcd_putc,"Finalizado        "); 
04EE:  MOVLW  76
04EF:  BSF    03.6
04F0:  MOVWF  0D
04F1:  MOVLW  02
04F2:  MOVWF  0F
04F3:  BCF    03.6
04F4:  CLRF   27
04F5:  BTFSC  0B.7
04F6:  BSF    27.7
04F7:  BCF    0B.7
04F8:  CALL   195
04F9:  BTFSC  27.7
04FA:  BSF    0B.7
....................       PosicionInicial3(); 
....................       g=1; 
*
0556:  MOVLW  01
0557:  MOVWF  2A
....................       p=0; 
0558:  CLRF   2B
....................       c=0; 
0559:  CLRF   29
....................       r=1; 
055A:  MOVWF  2C
....................      } 
....................      if(input(PIN_A1)==1&&g==1&&r==0)//Actua cuando el motor Principal llega a su fin 
055B:  BSF    03.5
055C:  BSF    05.1
055D:  BCF    03.5
055E:  BTFSS  05.1
055F:  GOTO   5E7
0560:  DECFSZ 2A,W
0561:  GOTO   5E7
0562:  MOVF   2C,F
0563:  BTFSS  03.2
0564:  GOTO   5E7
0565:  CLRF   27
0566:  BTFSC  0B.7
0567:  BSF    27.7
0568:  BCF    0B.7
....................      { 
....................       lcd_gotoxy(1,2);                       //escribe el mensaje en la posicion x=3,y=1 
0569:  MOVLW  01
056A:  MOVWF  3E
056B:  MOVLW  02
056C:  MOVWF  3F
056D:  CALL   15E
056E:  BTFSC  27.7
056F:  BSF    0B.7
....................       printf(lcd_putc,"Sensor 4"); 
0570:  MOVLW  80
0571:  BSF    03.6
0572:  MOVWF  0D
0573:  MOVLW  02
0574:  MOVWF  0F
0575:  BCF    03.6
0576:  CLRF   27
0577:  BTFSC  0B.7
0578:  BSF    27.7
0579:  BCF    0B.7
057A:  CALL   195
057B:  BTFSC  27.7
057C:  BSF    0B.7
057D:  CLRF   27
057E:  BTFSC  0B.7
057F:  BSF    27.7
0580:  BCF    0B.7
....................       lcd_gotoxy(1,1);                       //escribe el mensaje en la posicion x=3,y=1 
0581:  MOVLW  01
0582:  MOVWF  3E
0583:  MOVWF  3F
0584:  CALL   15E
0585:  BTFSC  27.7
0586:  BSF    0B.7
....................       printf(lcd_putc,"Finalizado        "); 
0587:  MOVLW  85
0588:  BSF    03.6
0589:  MOVWF  0D
058A:  MOVLW  02
058B:  MOVWF  0F
058C:  BCF    03.6
058D:  CLRF   27
058E:  BTFSC  0B.7
058F:  BSF    27.7
0590:  BCF    0B.7
0591:  CALL   195
0592:  BTFSC  27.7
0593:  BSF    0B.7
....................       PosicionInicial4(); 
....................       g=0; 
*
05E2:  CLRF   2A
....................       p=0; 
05E3:  CLRF   2B
....................       c=0; 
05E4:  CLRF   29
....................       r=1; 
05E5:  MOVLW  01
05E6:  MOVWF  2C
....................      } 
....................   } 
05E7:  GOTO   46B
....................  } 
05E8:  GOTO   441
.................... } 
....................  
05E9:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
